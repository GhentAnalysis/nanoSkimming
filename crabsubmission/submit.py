#!/usr/bin/env python

# imports
import sys
import os
import argparse
from pathlib import Path
from multiprocessing import Process

# import local tools
sys.path.append(str(Path(__file__).parents[1]))
from PhysicsTools.nanoSkimming.tools.sampletools import getsampleparams

def hascmsenv():
    ### check if cmsenv was set
    target = os.environ['CMSSW_BASE'].replace('/storage_mnt/storage','')
    if target in os.getcwd(): return True
    return False

def writesh(shname, processor, argstr=''):
    ### write a bash script that can be executed by CRAB
    with open(shname, 'w') as f:
        f.write('# This file is automatically generated by submit.py\n')
        f.write('# Do not modify by hand as it will be overwritten.\n')
        # get the basename from the full processor path;
        # this is enough as the file will be transfered to the working directory
        # on the worker node, irrespective of its full path here (?).
        # (this is done by the setting config.JobType.inputFiles = [processor])
        pbase = os.path.basename(processor)
        f.write('python3 {} {}\n'.format(processor, argstr))


if __name__=='__main__':

    # check if cmsenv was run
    if not hascmsenv():
        msg = 'ERROR: it seems like cmsenv was not yet run.'
        raise Exception(msg)

    # read command line arguments
    parser = argparse.ArgumentParser(description='Submit skimmer via CRAB')
    parser.add_argument('-i', '--datasetfile', required=True, type=os.path.abspath,
                        help='File with dataset names to process')
    parser.add_argument('-p', '--processor', default='crabrun.py',
                        help='Python script to run on each file')
    parser.add_argument('-c', '--crabconfig', default='crabconfig.py',
                        help='CRAB configuration file')
    parser.add_argument('-o', '--outputdir', default='nanoaodskims',
                        help='Output directory (relative to default storage site CRAB output directory)')
    parser.add_argument('-n', '--nentries', default=-1, type=int,
                        help='Number of entries to process per unit')
    args = parser.parse_args()

    # print arguments
    print('Running with following configuration:')
    for arg in vars(args):
        print('  - {}: {}'.format(arg,getattr(args,arg)))

    # get the datasets
    datasets = []
    with open(args.datasetfile) as f:
        lines = f.readlines()
    for line in lines:
        line = line.strip(' \t\n')
        if len(line)==0: continue
        if line.startswith('#'): continue
        datasets.append(line)

    # check sample parameters for all samples
    for dataset in datasets:
        _ = getsampleparams(dataset)

    # write a bash script with the command CRAB should execute
    shname = os.path.splitext(args.processor)[0]+'.sh'
    argstr = ''
    if args.nentries > 0: argstr += '--nentries {}'.format(args.nentries)
    writesh(shname, args.processor, argstr=argstr)

    # loop over datasets
    for i,dataset in enumerate(datasets):
        print('Submitting dataset {} ({}/{}) using CRAB...'.format(
          dataset, i+1, len(datasets)))

        # determine year for this sample
        params = getsampleparams(dataset)
        year = params['year']

        # set environment variables
        os.environ['CRAB_DATASET'] = dataset
        os.environ['CRAB_PROCESSOR'] = args.processor
        os.environ['CRAB_SCRIPT'] = shname
        os.environ['CRAB_OUTPUTDIR'] = args.outputdir

        # submit
        os.system('crab submit -c {}'.format(args.crabconfig))
